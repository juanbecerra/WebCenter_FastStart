package au.com.leighton.portal.innovation.model;

import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Aug 17 11:51:11 EST 2011
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class InnoFilterRegisterViewRowImpl extends ViewRowImpl
{
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum
    {
        Username
        {
            public Object get(InnoFilterRegisterViewRowImpl obj)
            {
                return obj.getUsername();
            }

            public void put(InnoFilterRegisterViewRowImpl obj, Object value)
            {
                obj.setUsername((String)value);
            }
        },
        Division
        {
            public Object get(InnoFilterRegisterViewRowImpl obj)
            {
                return obj.getDivision();
            }

            public void put(InnoFilterRegisterViewRowImpl obj, Object value)
            {
                obj.setDivision((String)value);
            }
        },
        Status
        {
            public Object get(InnoFilterRegisterViewRowImpl obj)
            {
                return obj.getStatus();
            }

            public void put(InnoFilterRegisterViewRowImpl obj, Object value)
            {
                obj.setStatus((String)value);
            }
        },
        InnovationCategory
        {
            public Object get(InnoFilterRegisterViewRowImpl obj)
            {
                return obj.getInnovationCategory();
            }

            public void put(InnoFilterRegisterViewRowImpl obj, Object value)
            {
                obj.setInnovationCategory((String)value);
            }
        },
        FromDate
        {
            public Object get(InnoFilterRegisterViewRowImpl obj)
            {
                return obj.getFromDate();
            }

            public void put(InnoFilterRegisterViewRowImpl obj, Object value)
            {
                obj.setFromDate((Date)value);
            }
        },
        ToDate
        {
            public Object get(InnoFilterRegisterViewRowImpl obj)
            {
                return obj.getToDate();
            }

            public void put(InnoFilterRegisterViewRowImpl obj, Object value)
            {
                obj.setToDate((Date)value);
            }
        },
        InnovationStatus
        {
            public Object get(InnoFilterRegisterViewRowImpl obj)
            {
                return obj.getInnovationStatus();
            }

            public void put(InnoFilterRegisterViewRowImpl obj, Object value)
            {
                obj.setInnovationStatus((String)value);
            }
        },
        InnovationDivision
        {
            public Object get(InnoFilterRegisterViewRowImpl obj)
            {
                return obj.getInnovationDivision();
            }

            public void put(InnoFilterRegisterViewRowImpl obj, Object value)
            {
                obj.setInnovationDivision((String)value);
            }
        },
        InnovationFromDate
        {
            public Object get(InnoFilterRegisterViewRowImpl obj)
            {
                return obj.getInnovationFromDate();
            }

            public void put(InnoFilterRegisterViewRowImpl obj, Object value)
            {
                obj.setInnovationFromDate((Date)value);
            }
        },
        InnovationToDate
        {
            public Object get(InnoFilterRegisterViewRowImpl obj)
            {
                return obj.getInnovationToDate();
            }

            public void put(InnoFilterRegisterViewRowImpl obj, Object value)
            {
                obj.setInnovationToDate((Date)value);
            }
        },
        MySubmissionsOnly
        {
            public Object get(InnoFilterRegisterViewRowImpl obj)
            {
                return obj.getMySubmissionsOnly();
            }

            public void put(InnoFilterRegisterViewRowImpl obj, Object value)
            {
                obj.setMySubmissionsOnly((Number)value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(InnoFilterRegisterViewRowImpl object);

        public abstract void put(InnoFilterRegisterViewRowImpl object,
                                 Object value);

        public int index()
        {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex()
        {
            return firstIndex;
        }

        public static int count()
        {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues()
        {
            if (vals == null)
            {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int USERNAME = AttributesEnum.Username.index();
    public static final int DIVISION = AttributesEnum.Division.index();
    public static final int STATUS = AttributesEnum.Status.index();
    public static final int INNOVATIONCATEGORY =
        AttributesEnum.InnovationCategory.index();
    public static final int FROMDATE = AttributesEnum.FromDate.index();
    public static final int TODATE = AttributesEnum.ToDate.index();
    public static final int INNOVATIONSTATUS =
        AttributesEnum.InnovationStatus.index();
    public static final int INNOVATIONDIVISION =
        AttributesEnum.InnovationDivision.index();
    public static final int INNOVATIONFROMDATE =
        AttributesEnum.InnovationFromDate.index();
    public static final int INNOVATIONTODATE =
        AttributesEnum.InnovationToDate.index();
    public static final int MYSUBMISSIONSONLY =
        AttributesEnum.MySubmissionsOnly.index();

    /**
     * This is the default constructor (do not remove).
     */
    public InnoFilterRegisterViewRowImpl()
    {
    }

    /**
     * Gets InnoFilterRegister entity object.
     * @return the InnoFilterRegister
     */
    public EntityImpl getInnoFilterRegister()
    {
        return (EntityImpl)getEntity(0);
    }

    /**
     * Gets the attribute value for USERNAME using the alias name Username.
     * @return the USERNAME
     */
    public String getUsername()
    {
        return (String)getAttributeInternal(USERNAME);
    }

    /**
     * Sets <code>value</code> as attribute value for USERNAME using the alias name Username.
     * @param value value to set the USERNAME
     */
    public void setUsername(String value)
    {
        setAttributeInternal(USERNAME, value);
    }

    /**
     * Gets the attribute value for DIVISION using the alias name Division.
     * @return the DIVISION
     */
    public String getDivision()
    {
        return (String)getAttributeInternal(DIVISION);
    }

    /**
     * Sets <code>value</code> as attribute value for DIVISION using the alias name Division.
     * @param value value to set the DIVISION
     */
    public void setDivision(String value)
    {
        setAttributeInternal(DIVISION, value);
    }

    /**
     * Gets the attribute value for STATUS using the alias name Status.
     * @return the STATUS
     */
    public String getStatus()
    {
        return (String)getAttributeInternal(STATUS);
    }

    /**
     * Sets <code>value</code> as attribute value for STATUS using the alias name Status.
     * @param value value to set the STATUS
     */
    public void setStatus(String value)
    {
        setAttributeInternal(STATUS, value);
    }

    /**
     * Gets the attribute value for INNOVATION_CATEGORY using the alias name InnovationCategory.
     * @return the INNOVATION_CATEGORY
     */
    public String getInnovationCategory()
    {
        return (String)getAttributeInternal(INNOVATIONCATEGORY);
    }

    /**
     * Sets <code>value</code> as attribute value for INNOVATION_CATEGORY using the alias name InnovationCategory.
     * @param value value to set the INNOVATION_CATEGORY
     */
    public void setInnovationCategory(String value)
    {
        setAttributeInternal(INNOVATIONCATEGORY, value);
    }

    /**
     * Gets the attribute value for FROM_DATE using the alias name FromDate.
     * @return the FROM_DATE
     */
    public Date getFromDate()
    {
        return (Date)getAttributeInternal(FROMDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for FROM_DATE using the alias name FromDate.
     * @param value value to set the FROM_DATE
     */
    public void setFromDate(Date value)
    {
        setAttributeInternal(FROMDATE, value);
    }

    /**
     * Gets the attribute value for TO_DATE using the alias name ToDate.
     * @return the TO_DATE
     */
    public Date getToDate()
    {
        return (Date)getAttributeInternal(TODATE);
    }

    /**
     * Sets <code>value</code> as attribute value for TO_DATE using the alias name ToDate.
     * @param value value to set the TO_DATE
     */
    public void setToDate(Date value)
    {
        setAttributeInternal(TODATE, value);
    }

    /**
     * Gets the attribute value for INNOVATION_STATUS using the alias name InnovationStatus.
     * @return the INNOVATION_STATUS
     */
    public String getInnovationStatus()
    {
        return (String)getAttributeInternal(INNOVATIONSTATUS);
    }

    /**
     * Sets <code>value</code> as attribute value for INNOVATION_STATUS using the alias name InnovationStatus.
     * @param value value to set the INNOVATION_STATUS
     */
    public void setInnovationStatus(String value)
    {
        setAttributeInternal(INNOVATIONSTATUS, value);
    }

    /**
     * Gets the attribute value for INNOVATION_DIVISION using the alias name InnovationDivision.
     * @return the INNOVATION_DIVISION
     */
    public String getInnovationDivision()
    {
        return (String)getAttributeInternal(INNOVATIONDIVISION);
    }

    /**
     * Sets <code>value</code> as attribute value for INNOVATION_DIVISION using the alias name InnovationDivision.
     * @param value value to set the INNOVATION_DIVISION
     */
    public void setInnovationDivision(String value)
    {
        setAttributeInternal(INNOVATIONDIVISION, value);
    }

    /**
     * Gets the attribute value for INNOVATION_FROM_DATE using the alias name InnovationFromDate.
     * @return the INNOVATION_FROM_DATE
     */
    public Date getInnovationFromDate()
    {
        return (Date)getAttributeInternal(INNOVATIONFROMDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for INNOVATION_FROM_DATE using the alias name InnovationFromDate.
     * @param value value to set the INNOVATION_FROM_DATE
     */
    public void setInnovationFromDate(Date value)
    {
        setAttributeInternal(INNOVATIONFROMDATE, value);
    }

    /**
     * Gets the attribute value for INNOVATION_TO_DATE using the alias name InnovationToDate.
     * @return the INNOVATION_TO_DATE
     */
    public Date getInnovationToDate()
    {
        return (Date)getAttributeInternal(INNOVATIONTODATE);
    }

    /**
     * Sets <code>value</code> as attribute value for INNOVATION_TO_DATE using the alias name InnovationToDate.
     * @param value value to set the INNOVATION_TO_DATE
     */
    public void setInnovationToDate(Date value)
    {
        setAttributeInternal(INNOVATIONTODATE, value);
    }

    /**
     * Gets the attribute value for MY_SUBMISSIONS_ONLY using the alias name MySubmissionsOnly.
     * @return the MY_SUBMISSIONS_ONLY
     */
    public Number getMySubmissionsOnly()
    {
        return (Number)getAttributeInternal(MYSUBMISSIONSONLY);
    }

    /**
     * Sets <code>value</code> as attribute value for MY_SUBMISSIONS_ONLY using the alias name MySubmissionsOnly.
     * @param value value to set the MY_SUBMISSIONS_ONLY
     */
    public void setMySubmissionsOnly(Number value)
    {
        setAttributeInternal(MYSUBMISSIONSONLY, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception
    {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count()))
        {
            return AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception
    {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count()))
        {
            AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    public FilterBean toBean()
    {
        FilterBean result = new FilterBean();

        result.setDivision(getDivision());
        result.setFromDate(getFromDate());
        result.setInnovationCategory(getInnovationCategory());
        result.setInnovationDivision(getInnovationDivision());
        result.setInnovationFromDate(getInnovationFromDate());
        result.setInnovationStatus(getInnovationStatus());
        result.setInnovationToDate(getInnovationToDate());
        result.setStatus(getStatus());
        result.setToDate(getToDate());
        result.setUsername(getUsername());
        result.setMySubmissionsOnly(getMySubmissionsOnly() == null ? false :
                                    getMySubmissionsOnly().intValue() > 0);

        return result;
    }

    public void fromBean(FilterBean bean, boolean storeIdeaValues,
                         boolean storeInnovationValues)
    {
        if (bean != null)
        {
            if (storeIdeaValues)
            {
                setDivision(bean.getDivision());
                setFromDate(bean.getFromDate());
                setStatus(bean.getStatus());
                setToDate(bean.getToDate());
            }

            if (storeInnovationValues)
            {
                setInnovationCategory(bean.getInnovationCategory());
                setInnovationDivision(bean.getInnovationDivision());
                setInnovationFromDate(bean.getInnovationFromDate());
                setInnovationStatus(bean.getInnovationStatus());
                setInnovationToDate(bean.getInnovationToDate());
                setMySubmissionsOnly(new Number(bean.isMySubmissionsOnly() ?
                                                1 : 0));
            }
            setUsername(bean.getUsername());
        }
    }
}
