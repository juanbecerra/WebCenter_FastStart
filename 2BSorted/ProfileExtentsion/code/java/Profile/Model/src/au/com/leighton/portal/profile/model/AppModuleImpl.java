package au.com.leighton.portal.profile.model;


import au.com.leighton.portal.profile.IExperience;
import au.com.leighton.portal.profile.IExperienceItem;
import au.com.leighton.portal.profile.IWorkHistory;
import au.com.leighton.portal.profile.IWorkHistoryItem;
import au.com.leighton.portal.profile.InvalidMandatoryFieldException;
import au.com.leighton.portal.profile.ProfileResponse;
import au.com.leighton.portal.profile.Utility;
import au.com.leighton.portal.profile.model.common.AppModule;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import java.util.ArrayList;
import java.util.List;

import oracle.jbo.Row;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Jul 02 08:58:13 EST 2011
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppModuleImpl extends ApplicationModuleImpl implements AppModule
{
    /**
     * This is the default constructor (do not remove).
     */
    public AppModuleImpl()
    {
    }


    //***********************************************************************
    // CUSTOMISATIONS
    //***********************************************************************

    private Number getNextIdExperience() throws SQLException
    {
        return getNextId(getProfExperienceView1(),
                         "LEIGHTON_SEQUENCE_EXPERIENCE");
    }

    private Number getNextIdWorkHistory() throws SQLException
    {
        return getNextId(getProfWorkhistoryView1(),
                         "LEIGHTON_SEQUENCE_WORKHISTORY");
    }

    private Number getNextId(ViewObjectImpl vo,
                             String sequenceName) throws SQLException
    {
        String parmInfo = Utility.buildParmStuff(new String[]
                { "View Object", vo == null ? null : vo.getName(),
                  "Sequence Name", sequenceName });
        Utility.logFinest(getClass(), "getNextId " + parmInfo, null);

        Number result = null;
        Statement statement = null;
        ResultSet resultSet = null;

        try
        {
            statement = vo.getDBTransaction().createStatement(0);
            resultSet =
                    statement.executeQuery("SELECT " + sequenceName + ".NEXTVAL FROM DUAL");

            if (resultSet.next())
            {
                result = new Number(resultSet.getInt(1));
            }
        }
        catch (SQLException ex)
        {
            Utility.logWarning(getClass(), "getNextId " + parmInfo, ex);

            throw ex;
        }
        finally
        {
            if (resultSet != null)
            {
                try
                {
                    resultSet.close();
                }
                catch (Exception ex)
                {
                    Utility.logWarning(getClass(), "getNextId " + parmInfo,
                                       ex);
                    // do not want a clean up excepton to hide real errors
                    Utility.addError(ex.getMessage());
                }
            }

            if (statement != null)
            {
                try
                {
                    statement.close();
                }
                catch (Exception ex)
                {
                    Utility.logWarning(getClass(), "getNextId " + parmInfo,
                                       ex);
                    // do not want a clean up excepton to hide real errors
                    Utility.addError(ex.getMessage());
                }
            }
        }

        Utility.logFinest(getClass(), "getNextId " + parmInfo + "=" + result,
                          null);

        return result;
    }

    public List<IExperienceItem> getAllExperienceItems()
    {
        List<IExperienceItem> result = new ArrayList<IExperienceItem>();

        try
        {
            getProfExperienceView1().setWhereClause("");
            getProfExperienceView1().executeQuery();

            ProfExperienceViewRowImpl row = null;

            while (getProfExperienceView1().hasNext())
            {
                row =
(ProfExperienceViewRowImpl)getProfExperienceView1().next();

                result.add(row.toBean());
            }
        }
        catch (Exception e)
        {
            Utility.logWarning(getClass(),
                               "Failed to get all experience items", e);
        }

        return result;
    }

    public List<IWorkHistoryItem> getAllWorkHistoryItems()
    {
        List<IWorkHistoryItem> result = new ArrayList<IWorkHistoryItem>();

        try
        {
            getProfWorkhistoryView1().setWhereClause("");
            getProfWorkhistoryView1().executeQuery();

            ProfWorkhistoryViewRowImpl row = null;

            while (getProfWorkhistoryView1().hasNext())
            {
                row =
(ProfWorkhistoryViewRowImpl)getProfWorkhistoryView1().next();

                result.add(row.toBean());
            }
        }
        catch (Exception e)
        {
            Utility.logWarning(getClass(),
                               "Failed to get all work history items", e);
        }

        return result;
    }

    public ProfileResponse getExperience(String username)
    {
        String parmInfo = Utility.buildParmStuff(new String[]
                { "Username", username });

        Utility.logFinest(getClass(), "getExperience " + parmInfo, null);

        ProfileResponse response = new ProfileResponse();

        try
        {
            Experience experience = new Experience();
            experience.setUsername(username);

            StringBuffer whereClause = new StringBuffer();

            Utility.addWhereClause(whereClause,
                                   Utility.TableProfileExperienceView.USERNAME,
                                   username);
            Utility.addWhereClause(whereClause,
                                   Utility.TableProfileExperienceView.DELETED,
                                   new Number(0));

            getProfExperienceView1().setWhereClause(whereClause.toString());

            getProfExperienceView1().executeQuery();

            ProfExperienceViewRowImpl currentRow = null;

            while ((currentRow =
                    (ProfExperienceViewRowImpl)getProfExperienceView1().next()) !=
                   null)
            {
                IExperienceItem experienceItem = currentRow.toBean();

                if (experienceItem != null)
                {
                    experience.getExperienceItems().add(experienceItem);
                }
            }

            response.setExperience(experience);
        }
        catch (Exception e)
        {
            Utility.logWarning(getClass(), "getExperience " + parmInfo, e);
            response.setException(e);
        }

        Utility.logFinest(getClass(),
                          "getExperience " + parmInfo + "=" + response, null);

        return response;
    }

    public ProfileResponse getWorkHistory(String username)
    {
        String parmInfo = Utility.buildParmStuff(new String[]
                { "Username", username });

        Utility.logFinest(getClass(), "getWorkHistory " + parmInfo, null);
        ProfileResponse response = new ProfileResponse();

        try
        {
            WorkHistory workHistory = new WorkHistory();
            workHistory.setUsername(username);

            StringBuffer whereClause = new StringBuffer();

            Utility.addWhereClause(whereClause,
                                   Utility.TableProfileWorkHistoryView.USERNAME,
                                   username);
            Utility.addWhereClause(whereClause,
                                   Utility.TableProfileWorkHistoryView.DELETED,
                                   new Number(0));
            getProfWorkhistoryView1().setWhereClause(whereClause.toString());

            getProfWorkhistoryView1().setOrderByClause("Enddate desc");
            getProfWorkhistoryView1().executeQuery();

            ProfWorkhistoryViewRowImpl currentRow = null;

            while ((currentRow =
                    (ProfWorkhistoryViewRowImpl)getProfWorkhistoryView1().next()) !=
                   null)
            {
                IWorkHistoryItem workHistoryItem = currentRow.toBean();

                if (workHistoryItem != null)
                {
                    workHistory.getWorkHistoryItems().add(workHistoryItem);
                }
            }

            response.setWorkHistory(workHistory);
        }
        catch (Exception e)
        {
            Utility.logWarning(getClass(), "getWorkHistory " + parmInfo, e);
            response.setException(e);
        }
        Utility.logFinest(getClass(),
                          "getWorkHistory " + parmInfo + "=" + response, null);
        return response;
    }

    public ProfileResponse updateExperienceItem(IExperienceItem original,
                                                String title,
                                                String experienceDescription)
    {
        String parmInfo = Utility.buildParmStuff(new String[]
                { "Original", original == null ? null : original.toString(),
                  "Title", title, "Experience Description",
                  experienceDescription });
        Utility.logFinest(getClass(), "updateExperienceItem " + parmInfo,
                          null);
        ProfileResponse response = new ProfileResponse();

        try
        {
            validate(title, experienceDescription);

            StringBuffer whereClause = new StringBuffer();

            Utility.addWhereClause(whereClause,
                                   Utility.TableProfileExperienceView.ID,
                                   new Number(original.getId()));
            Utility.addWhereClause(whereClause,
                                   Utility.TableProfileExperienceView.DELETED,
                                   new Number(0));

            getProfExperienceView1().setWhereClause(whereClause.toString());
            getProfExperienceView1().executeQuery();

            if (getProfExperienceView1().getRowCount() == 1)
            {
                ProfExperienceViewRowImpl row =
                    (ProfExperienceViewRowImpl)getProfExperienceView1().next();

                if (row != null)
                {
                    row.setTitle(title);
                    row.setExperiencedescription(experienceDescription);
                    //                    row.setAttribute(Utility.TableProfileExperienceView.TITLE.getName(),
                    //                                     title);
                    //                    row.setAttribute(Utility.TableProfileExperienceView.EXPERIENCE_DESCRIPTION.getName(), experienceDescription);

                    getProfExperienceView1().getDBTransaction().commit();

                    response.setExperienceItem(row.toBean());
                }
                else
                {
                    response.setException(new Exception("Unable to find experience item id=" +
                                                        original.getId()));
                }

            }
            else
            {
                response.setException(new Exception("Unable to find experience item id=" +
                                                    original.getId()));
            }
        }
        catch (Exception e)
        {
            Utility.logWarning(getClass(), "updateExperienceItem " + parmInfo,
                               e);
            response.setException(e);
        }
        Utility.logFinest(getClass(),
                          "updateExperienceItem " + parmInfo + "=" + response,
                          null);

        return response;
    }

    public ProfileResponse updateWorkHistoryItem(IWorkHistoryItem original,
                                                 String role, String company,
                                                 String location,
                                                 Date fromDate, Date toDate,
                                                 String jobDescription)
    {
        String parmInfo = Utility.buildParmStuff(new String[]
                { "Original", original == null ? null : original.toString(),
                  "Role", role, "Company", company, "Location", location,
                  "From Date", fromDate == null ? null : fromDate.toString(),
                  "To Date", toDate == null ? null : toDate.toString(),
                  "Job Description", jobDescription });
        Utility.logFinest(getClass(), "updateWorkHistoryItem " + parmInfo,
                          null);
        ProfileResponse response = new ProfileResponse();

        try
        {
            validate(role, company, location, fromDate, toDate,
                     jobDescription);

            StringBuffer whereClause = new StringBuffer();

            Utility.addWhereClause(whereClause,
                                   Utility.TableProfileWorkHistoryView.ID,
                                   new Number(original.getId()));
            Utility.addWhereClause(whereClause,
                                   Utility.TableProfileWorkHistoryView.DELETED,
                                   new Number(0));

            getProfWorkhistoryView1().setWhereClause(whereClause.toString());
            getProfWorkhistoryView1().executeQuery();

            if (getProfWorkhistoryView1().getRowCount() == 1)
            {
                ProfWorkhistoryViewRowImpl row =
                    (ProfWorkhistoryViewRowImpl)getProfWorkhistoryView1().next();

                row.setRole(role);
                row.setCompany(company);
                row.setLocation(location);
                row.setStartdate(fromDate);
                row.setEnddate(toDate);
                row.setJobdescription(jobDescription);
                //                row.setAttribute(Utility.TableProfileWorkHistoryView.ROLE.getName(),
                //                                 role);
                //                row.setAttribute(Utility.TableProfileWorkHistoryView.COMPANY.getName(),
                //                                 company);
                //                row.setAttribute(Utility.TableProfileWorkHistoryView.LOCATION.getName(),
                //                                 location);
                //                row.setAttribute(Utility.TableProfileWorkHistoryView.START_DATE.getName(),
                //                                 fromDate);
                //                row.setAttribute(Utility.TableProfileWorkHistoryView.END_DATE.getName(),
                //                                 toDate);
                //                row.setAttribute(Utility.TableProfileWorkHistoryView.JOB_DESCRIPTION.getName(),
                //                                 jobDescription);

                getProfWorkhistoryView1().getDBTransaction().commit();

                response.setWorkHistoryItem(row.toBean());

            }
            else
            {
                response.setException(new Exception("Unable to find work history item id=" +
                                                    original.getId()));
            }
        }
        catch (Exception e)
        {
            Utility.logFinest(getClass(), "updateWorkHistoryItem " + parmInfo,
                              e);
            response.setException(e);
        }
        Utility.logFinest(getClass(),
                          "updateWorkHistoryItem " + parmInfo + "=" + response,
                          null);

        return response;
    }

    public ProfileResponse createExperienceItem(IExperience experience,
                                                String title,
                                                String experienceDescription)
    {
        String parmInfo = Utility.buildParmStuff(new String[]
                { "Experience",
                  experience == null ? null : experience.toString(), "Title",
                  title, "Experience Description", experienceDescription });
        Utility.logFinest(getClass(), "createExperienceItem " + parmInfo,
                          null);
        ProfileResponse response = new ProfileResponse();

        try
        {
            validate(title, experienceDescription);

            ProfExperienceViewRowImpl row =
                (ProfExperienceViewRowImpl)getProfExperienceView1().createRow();

            row.setId(getNextIdExperience());
            row.setTitle(title);
            row.setDeleted(new Number(0));
            row.setUsername(experience.getUsername());
            row.setExperiencedescription(experienceDescription);

            //            row.setAttribute(Utility.TableProfileExperienceView.ID.getName(),
            //                             getNextIdExperience());
            //            row.setAttribute(Utility.TableProfileExperienceView.TITLE.getName(),
            //                             title);
            //            row.setAttribute(Utility.TableProfileExperienceView.DELETED.getName(),
            //                             0);
            //            row.setAttribute(Utility.TableProfileExperienceView.USERNAME.getName(),
            //                             experience.getUsername());
            //            row.setAttribute(Utility.TableProfileExperienceView.EXPERIENCE_DESCRIPTION.getName(),
            //                             experienceDescription);

            getProfExperienceView1().insertRow(row);
            getProfExperienceView1().getDBTransaction().commit();

            response.setExperienceItem(row.toBean());
        }
        catch (Exception e)
        {
            Utility.logWarning(getClass(), "createExperienceItem " + parmInfo,
                               e);
            response.setException(e);
        }
        Utility.logFinest(getClass(),
                          "createExperienceItem " + parmInfo + "=" + response,
                          null);

        return response;
    }

    public ProfileResponse createWorkHistoryItem(IWorkHistory workHistory,
                                                 String role, String company,
                                                 String location,
                                                 Date fromDate, Date toDate,
                                                 String jobDescription)
    {
        String parmInfo = Utility.buildParmStuff(new String[]
                { "Work history",
                  workHistory == null ? null : workHistory.toString(), "Role",
                  role, "Company", company, "Location", location, "From Date",
                  fromDate == null ? null : fromDate.toString(), "To Date",
                  toDate == null ? null : toDate.toString(), "Job Description",
                  jobDescription });
        Utility.logFinest(getClass(), "createWorkHistoryItem " + parmInfo,
                          null);
        ProfileResponse response = new ProfileResponse();

        try
        {
            validate(role, company, location, fromDate, toDate,
                     jobDescription);

            ProfWorkhistoryViewRowImpl row =
                (ProfWorkhistoryViewRowImpl)getProfWorkhistoryView1().createRow();

            row.setId(getNextIdWorkHistory());
            row.setUsername(workHistory.getUsername());
            row.setDeleted(new Number(0));
            row.setRole(role);
            row.setCompany(company);
            row.setLocation(location);
            row.setStartdate(fromDate);
            row.setEnddate(toDate);
            row.setJobdescription(jobDescription);

            //            row.setAttribute(Utility.TableProfileWorkHistoryView.ID.getName(),
            //                             getNextIdWorkHistory());
            //            row.setAttribute(Utility.TableProfileWorkHistoryView.USERNAME.getName(),
            //                             workHistory.getUsername());
            //            row.setAttribute(Utility.TableProfileWorkHistoryView.DELETED.getName(),
            //                             0);
            //            row.setAttribute(Utility.TableProfileWorkHistoryView.ROLE.getName(),
            //                             role);
            //            row.setAttribute(Utility.TableProfileWorkHistoryView.COMPANY.getName(),
            //                             company);
            //            row.setAttribute(Utility.TableProfileWorkHistoryView.LOCATION.getName(),
            //                             location);
            //            row.setAttribute(Utility.TableProfileWorkHistoryView.START_DATE.getName(),
            //                             fromDate);
            //            row.setAttribute(Utility.TableProfileWorkHistoryView.END_DATE.getName(),
            //                             toDate);
            //            row.setAttribute(Utility.TableProfileWorkHistoryView.JOB_DESCRIPTION.getName(),
            //                             jobDescription);

            getProfWorkhistoryView1().insertRow(row);
            getProfWorkhistoryView1().getDBTransaction().commit();
            response.setWorkHistoryItem(row.toBean());
        }
        catch (Exception e)
        {
            Utility.logWarning(getClass(), "createWorkHistoryItem " + parmInfo,
                               e);
            response.setException(e);
        }
        Utility.logFinest(getClass(),
                          "createWorkHistoryItem " + parmInfo + "=" + response,
                          null);

        return response;
    }

    public ProfileResponse deleteExperienceItem(IExperience experience,
                                                IExperienceItem experienceItem)
    {
        String parmInfo = Utility.buildParmStuff(new String[]
                { "Experience",
                  experience == null ? null : experience.toString(),
                  "Experience Item",
                  experienceItem == null ? null : experienceItem.toString() });

        Utility.logFinest(getClass(), "deleteExperienceItem " + parmInfo,
                          null);
        ProfileResponse response = new ProfileResponse();

        try
        {
            boolean boolValue = false;

            if ((experience != null) && (experienceItem != null) &&
                (experience.getExperienceItems().contains(experienceItem)))
            {
                StringBuffer whereClause = new StringBuffer();
                Utility.addWhereClause(whereClause,
                                       Utility.TableProfileExperienceView.ID,
                                       new Number(experienceItem.getId()));
                Utility.addWhereClause(whereClause,
                                       Utility.TableProfileExperienceView.DELETED,
                                       new Number(0));
                getProfExperienceView1().setWhereClause(whereClause.toString());
                getProfExperienceView1().executeQuery();

                if (getProfExperienceView1().getRowCount() == 1)
                {
                    ProfExperienceViewRowImpl row =
                        (ProfExperienceViewRowImpl)getProfExperienceView1().next();

                    row.setDeleted(new Number(1));
                    //                    row.setAttribute(Utility.TableProfileExperienceView.DELETED.getName(),
                    //                                   1);

                    getProfExperienceView1().getDBTransaction().commit();
                    getProfExperienceView1().clearCache();

                    experience.getExperienceItems().remove(experienceItem);

                    boolValue = true;
                }
                else
                {
                    response.setException(new Exception("Could not find experience item id=" +
                                                        experienceItem.getId()));
                }
            }

            response.setBooleanValue(boolValue);
        }
        catch (Exception e)
        {
            Utility.logWarning(getClass(), "deleteExperienceItem " + parmInfo,
                               e);
            response.setException(e);
        }
        Utility.logFinest(getClass(),
                          "deleteExperienceItem " + parmInfo + "=" + response,
                          null);
        return response;
    }

    public ProfileResponse deleteWorkHistoryItem(IWorkHistory workHistory,
                                                 IWorkHistoryItem workHistoryItem)
    {
        String parmInfo = Utility.buildParmStuff(new String[]
                { "Work history",
                  workHistory == null ? null : workHistory.toString(),
                  "Work History Item",
                  workHistoryItem == null ? null : workHistoryItem.toString() });
        Utility.logFinest(getClass(), "deleteWorkHistoryItem " + parmInfo,
                          null);
        ProfileResponse response = new ProfileResponse();

        try
        {
            boolean boolValue = false;

            if ((workHistory != null) && (workHistoryItem != null) &&
                (workHistory.getWorkHistoryItems().contains(workHistoryItem)))
            {
                StringBuffer whereClause = new StringBuffer();
                Utility.addWhereClause(whereClause,
                                       Utility.TableProfileWorkHistoryView.ID,
                                       new Number(workHistoryItem.getId()));
                Utility.addWhereClause(whereClause,
                                       Utility.TableProfileWorkHistoryView.DELETED,
                                       new Number(0));
                getProfWorkhistoryView1().setWhereClause(whereClause.toString());
                getProfWorkhistoryView1().executeQuery();

                if (getProfWorkhistoryView1().getRowCount() == 1)
                {
                    Row row = getProfWorkhistoryView1().next();

                    row.setAttribute(Utility.TableProfileWorkHistoryView.DELETED.getName(),
                                     1);

                    getProfWorkhistoryView1().getDBTransaction().commit();
                    getProfWorkhistoryView1().clearCache();

                    workHistory.getWorkHistoryItems().remove(workHistoryItem);

                    boolValue = true;
                }
                else
                {
                    response.setException(new Exception("Could not find work history item id=" +
                                                        workHistoryItem.getId()));
                }
            }

            response.setBooleanValue(boolValue);
        }
        catch (Exception e)
        {
            Utility.logWarning(getClass(), "deleteWorkHistoryItem " + parmInfo,
                               e);
            response.setException(e);
        }

        Utility.logFinest(getClass(),
                          "deleteWorkHistoryItem " + parmInfo + "=" + response,
                          null);
        return response;
    }

    private void validateMandatoryField(List<String> badFieldNames,
                                        String fieldName, String value)
    {
        if (Utility.isNullOrEmpty(value))
        {
            badFieldNames.add(fieldName);
        }
    }

    private void validateMandatoryField(List<String> badFieldNames,
                                        String fieldName, Date value)
    {
        if (value == null)
        {
            badFieldNames.add(fieldName);
        }
    }

    private void validate(String title,
                          String experienceDescription) throws InvalidMandatoryFieldException
    {
        List<String> fields = new ArrayList<String>();

        validateMandatoryField(fields, "Title", title);
        validateMandatoryField(fields, "Experience Description",
                               experienceDescription);

        if (fields.size() > 0)
        {
            throw new InvalidMandatoryFieldException(fields);
        }
    }

    private void validate(String role, String company, String location,
                          Date fromDate, Date toDate,
                          String jobDescription) throws InvalidMandatoryFieldException
    {
        List<String> fields = new ArrayList<String>();

        validateMandatoryField(fields, "Role", role);
        validateMandatoryField(fields, "Company", company);
        validateMandatoryField(fields, "Location", location);
        validateMandatoryField(fields, "From Date", fromDate);
        validateMandatoryField(fields, "Job Description", jobDescription);

        if (fields.size() > 0)
        {
            throw new InvalidMandatoryFieldException(fields);
        }

    }

    /**
     * Container's getter for ProfExperienceView1.
     * @return ProfExperienceView1
     */
    public ViewObjectImpl getProfExperienceView1()
    {
        return (ViewObjectImpl)findViewObject("ProfExperienceView1");
    }

    /**
     * Container's getter for ProfWorkhistoryView1.
     * @return ProfWorkhistoryView1
     */
    public ViewObjectImpl getProfWorkhistoryView1()
    {
        return (ViewObjectImpl)findViewObject("ProfWorkhistoryView1");
    }
}
