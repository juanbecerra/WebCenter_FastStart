package au.com.leighton.model.view;

import au.com.leighton.model.util.EnvironmentUtil;
import au.com.leighton.model.util.LogUtility;
import au.com.leighton.model.view.common.EAapplicationEditVORow;

import oracle.adf.model.binding.DCBindingContainer;

import oracle.adf.share.ADFContext;

import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed May 02 19:42:41 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class EAapplicationEditVORowImpl extends ViewRowImpl implements EAapplicationEditVORow {
    public void checkSelectedBox() {
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        AppId {
            public Object get(EAapplicationEditVORowImpl obj) {
                return obj.getAppId();
            }

            public void put(EAapplicationEditVORowImpl obj, Object value) {
                obj.setAppId((Number)value);
            }
        }
        ,
        Logo {
            public Object get(EAapplicationEditVORowImpl obj) {
                return obj.getLogo();
            }

            public void put(EAapplicationEditVORowImpl obj, Object value) {
                obj.setLogo((String)value);
            }
        }
        ,
        Name {
            public Object get(EAapplicationEditVORowImpl obj) {
                return obj.getName();
            }

            public void put(EAapplicationEditVORowImpl obj, Object value) {
                obj.setName((String)value);
            }
        }
        ,
        markfordelete {
            public Object get(EAapplicationEditVORowImpl obj) {
                return obj.getmarkfordelete();
            }

            public void put(EAapplicationEditVORowImpl obj, Object value) {
                obj.setmarkfordelete((Boolean)value);
            }
        }
        ,
        shadow {
            public Object get(EAapplicationEditVORowImpl obj) {
                return obj.getshadow();
            }

            public void put(EAapplicationEditVORowImpl obj, Object value) {
                obj.setshadow((Boolean)value);
            }
        }
        ,
        EAapplicationEditVO1 {
            public Object get(EAapplicationEditVORowImpl obj) {
                return obj.getEAapplicationEditVO1();
            }

            public void put(EAapplicationEditVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        EAapplicationcreateVO1 {
            public Object get(EAapplicationEditVORowImpl obj) {
                return obj.getEAapplicationcreateVO1();
            }

            public void put(EAapplicationEditVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(EAapplicationEditVORowImpl object);

        public abstract void put(EAapplicationEditVORowImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static int checkCount = 1;


    public static final int APPID = AttributesEnum.AppId.index();
    public static final int LOGO = AttributesEnum.Logo.index();
    public static final int NAME = AttributesEnum.Name.index();
    public static final int MARKFORDELETE = AttributesEnum.markfordelete.index();
    public static final int SHADOW = AttributesEnum.shadow.index();
    public static final int EAAPPLICATIONEDITVO1 = AttributesEnum.EAapplicationEditVO1.index();
    public static final int EAAPPLICATIONCREATEVO1 = AttributesEnum.EAapplicationcreateVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public EAapplicationEditVORowImpl() {
    }

    /**
     * Gets EA_APPLICATION entity object.
     * @return the EA_APPLICATION
     */
    public EntityImpl getEA_APPLICATION() {
        return (EntityImpl)getEntity(0);
    }

    /**
     * Gets the attribute value for APP_ID using the alias name AppId.
     * @return the APP_ID
     */
    public Number getAppId() {
        return (Number)getAttributeInternal(APPID);
    }

    /**
     * Sets <code>value</code> as attribute value for APP_ID using the alias name AppId.
     * @param value value to set the APP_ID
     */
    public void setAppId(Number value) {
        setAttributeInternal(APPID, value);
    }

    /**
     * Gets the attribute value for LOGO using the alias name Logo.
     * @return the LOGO
     */
    public String getLogo() {
        return (String)getAttributeInternal(LOGO);
    }

    /**
     * Sets <code>value</code> as attribute value for LOGO using the alias name Logo.
     * @param value value to set the LOGO
     */
    public void setLogo(String value) {
        setAttributeInternal(LOGO, value);
    }

    /**
     * Gets the attribute value for NAME using the alias name Name.
     * @return the NAME
     */
    public String getName() {
        return (String)getAttributeInternal(NAME);
    }

    /**
     * Sets <code>value</code> as attribute value for NAME using the alias name Name.
     * @param value value to set the NAME
     */
    public void setName(String value) {
        setAttributeInternal(NAME, value);
    }


    /**
     * Gets the attribute value for MARKFORDELETE using the alias name markfordelete.
     * @return the MARKFORDELETE
     */
    public Boolean getmarkfordelete() {
        boolean myCheck = checkSelectedBox(getAppId());
        if (myCheck == true) {
            setshadow(true);
            return true;
        } else {
            setshadow(false);
            return false;
        }

    }

    /**
     * Sets <code>value</code> as attribute value for MARKFORDELETE using the alias name markfordelete.
     * @param value value to set the MARKFORDELETE
     */
    public void setmarkfordelete(Boolean value) {
        setAttributeInternal(MARKFORDELETE, value);
        setshadow(value);
    }


    /**
     * Gets the attribute value for SHADOW using the alias name shadow.
     * @return the SHADOW
     */
    public Boolean getshadow() {
        return (Boolean) getAttributeInternal(SHADOW);
    }

    /**
     * Sets <code>value</code> as attribute value for SHADOW using the alias name shadow.
     * @param value value to set the SHADOW
     */
    public void setshadow(Boolean value) {
        setAttributeInternal(SHADOW, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> EAapplicationEditVO1.
     */
    public RowSet getEAapplicationEditVO1() {
        return (RowSet)getAttributeInternal(EAAPPLICATIONEDITVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> EAapplicationcreateVO1.
     */
    public RowSet getEAapplicationcreateVO1() {
        return (RowSet)getAttributeInternal(EAAPPLICATIONCREATEVO1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * createSelectedRow: Create the rows selected from CheckBox.
     * @throws Exception
     */
    public void createSelectedRow() {
        String username = EnvironmentUtil.getUsername();

        try {
            boolean deletefalg = deleteExistingRow(username);
            if (deletefalg == true) {
                RowSet rowsetview = getEAapplicationEditVO1();
                RowSet rowsetcreate = getEAapplicationcreateVO1();
                Row[] rowsMarked =
                    rowsetview.getFilteredRows("shadow", true);
                if (rowsMarked.length > 0) {
                    for (Row rw : rowsMarked) {
                        System.out.println("rows app name" +
                                           rw.getAttribute("Name"));
                        Row row = rowsetcreate.createRow();
                        row.setAttribute("AppId", rw.getAttribute("AppId"));
                        row.setAttribute("Username", username);
                        rowsetcreate.insertRow(row);
                    }
                    rowsetcreate.executeQuery();
                    this.getDBTransaction().commit();

                }
                checkCount = 1;
            }
        } catch (Exception e) {
            String message = e.getMessage();
            LogUtility.logSevere(EnvironmentUtil.class, message, e);
            checkCount = 1;
        }
    }

    /**
     * deleteExistingRow: Delete all the rows from
       table EA_USERAPPLICATION where Username match.

     * @throws Exception
     */

    public boolean deleteExistingRow(String username) {
        try {
            RowSet rowsList = getEAapplicationcreateVO1();
            Row[] rowsdelete = rowsList.getFilteredRows("Username", username);
            for (Row rw : rowsdelete) {
                rw.remove();
            }
            this.getDBTransaction().commit();
            return true;
        } catch (Exception e) {
            String message = e.getMessage();
            LogUtility.logSevere(EnvironmentUtil.class, message, e);
            return false;
        }
    }

    /**
     * checkSelectedBox: Enable CheckBox selected for data in table  EA_USERAPPLICATION .

     * @param appid the Application id
     * @return the attribute boolean
     * @throws Exception
     */
    public boolean checkSelectedBox(Number appid) {
        try {
            String username = EnvironmentUtil.getUsername();
            RowSet rowsList = getEAapplicationcreateVO1();
            rowsList.setNamedWhereClauseParam("usernameCheck", username);
            Row[] rowsCount = rowsList.getFilteredRows("AppId", appid);
            if (rowsCount.length > 0) {
                return true;
            } else
                return false;
        } catch (Exception e) {
            String message = e.getMessage();
            LogUtility.logSevere(EnvironmentUtil.class, message, e);
            return false;
        }

    }
}

